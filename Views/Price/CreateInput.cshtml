
@{
  ViewBag.Title = "Add / Update Price | Jusqu'a";
}

<h2>Add / Update Price</h2>


<form id="priceRecordForm" method="POST" action="/Price/CreateProcess"></form>
<form id="shopSearchForm" action="JavaScript:search()"></form>


<div class="row">
  <div class="col-sm-8">

    <div class="form-floating mt-2">
      <input id="price"
             name="price"
             class="form-control"
             type="number"
             placeholder="0"
             step="0.01"
             form="priceRecordForm"/>
      <label for="price">Price</label>
    </div>



    <!--
      
    <div class="input-group mt-1">

      <div class="form-floating">
        <input id="unitAmount"
               name="unitAmount"
               class="form-control"
               type="number" 
               placeholder="0"
               form="priceRecordForm"/>
        <label for="unitAmount">Quantity</label>
      </div>

      <select id="units"
              name="unit"
              class="form-select ms-2"
              form="priceRecordForm">
        <option class="" value="1">grams(s)</option>
        <option class="" value="2">each</option>
      </select>
    </div>
    -->

  </div>
</div>


<!--TODO : 
  The first tab should suggest shops that have been previously used for this item before.
  While the second tab allows associating a new shop with the item.

  It should also skip the tab interface if there are no existing shops associated with
  this item and just show the option to search for a shop to associate instead.
-->

<div class="row">
  <div class="col-sm-8">


    <!--TabBar and Buttons-->
    <ul class="nav nav-tabs mt-5" id="myTab" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link active"
                id="home-tab"
                data-bs-toggle="tab"
                data-bs-target="#home"
                type="button"
                role="tab"
                aria-controls="home"
                aria-selected="true">
          Nearby
        </button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link"
                id="search-tab"
                data-bs-toggle="tab"
                data-bs-target="#search"
                type="button"
                role="tab"
                aria-controls="search"
                aria-selected="false">
          Search
        </button>
      </li>
    </ul>



    <!--Tab Content-->
    <div class="tab-content mt-4" id="myTabContent">
      <div class="tab-pane fade show active" 
           id="home" 
           role="tabpanel" 
           aria-labelledby="home-tab">

        <button id="btn-get-location"
                class="btn btn-outline-primary">
          Use Current Location
        </button>
        <p id="location" class="mt-2"></p>

      </div>


      <div class="tab-pane fade" 
           id="search" 
           role="tabpanel" 
           aria-labelledby="search-tab">

        <!--Tab content containing Inputs to search for shops -->
        <div class="form-floating">

          <input id="shopSearchBox"
                 class="form-control"
                 type="search"
                 placeholder="Walmart"
                 form="shopSearchForm"/>
          <label for="shopSearchBox">Search for shops by name</label>

        </div>

        <div class="d-flex mt-3">
          <div class="form-floating">
            <input id="shopSearchLatitude"
                   class="form-control"
                   type="number"
                   placeholder="000.000"
                   required
                   step="any"
                   form="shopSearchForm"/>
            <label for="shopSearchLatitude">Latitude</label>
          </div>


          <div class="form-floating ms-2">
            <input id="shopSearchLongitude"
                   class="form-control"
                   type="number"
                   placeholder="000.000"
                   required
                   step="any"
                   form="shopSearchForm"/>
            <label for="shopSearchLongitude" >Longitude</label>
          </div>
        </div>

        <button id="shopSearchDetectLocationButton" 
                class="btn btn-light w-100 mt-1">
          Autodetect Location
        </button>


        <div class="form-floating mt-3">
          <input id="shopSearchRadius"
                 class="form-control"
                 type="number"
                 placeholder="1"
                 value="1"
                 min="1"
                 required
                 form="shopSearchForm"/>

          <label for="shopSearchRadius" >Search Radius (km)</label>
        </div>

        <input id="shopSearchButton"
               class="btn btn-light mt-4"
               type="submit"
               value="Search"
               form="shopSearchForm"/>


        <div id="searchResultBox" class="mt-4 list-group visually-hidden">
          PLACEHOLDER TEXT
        </div>

       </div>
    </div>
  </div>
</div>




<div class="row">
  <div class="col-sm-8">

    <input type="hidden"
           value="@ViewBag.itemId"
           name="itemId"
           form="priceRecordForm"/>

    <input type="hidden"
           value="NULL"
           id="shop-id-input"
           name="shopOverpassId"
           form="priceRecordForm"/>

    <input type="hidden"
           value="NULL"
           id="shop-name-input"
           name="shopName"
           form="priceRecordForm"/>

    <input type="hidden"
           value="NULL"
           id="shop-address-input"
           name="shopAddress"
           form="priceRecordForm"/>

    <input type="hidden"
           value="NULL"
           id="shop-latitude-input"
           name="shopLatitude"
           form="priceRecordForm"/>

    <input type="hidden"
           value="NULL"
           id="shop-longitude-input"
           name="shopLongitude"
           form="priceRecordForm"/>

    <div class="border-top mt-5 ">

      <input id="main-submit-button"
             type="submit"
             value="Update"
             class="btn btn-lg btn-primary mt-4" 
             disabled
             form="priceRecordForm"/>

    </div>


  </div>
</div>




<script>
  async function OverPass_query(q) {
    const overpass_endpoint = "https://overpass-api.de/api/interpreter";

    //Sample query for the OverPass API's GraphQL.
//    const query = `[out:json];
//(
//  (node["shop"](around: ${r}, ${lat}, ${lon}););
//  (node["building"="retail"](around: ${r}, ${lat}, ${lon}););
//  (node["building"="supermarket"](around: ${r}, ${lat}, ${lon}););
//  (node["building"="pharmacy"](around: ${r}, ${lat}, ${lon}););
//);
//out;`;


    //Send the HTTP Request and process the response.
    const response = await fetch(overpass_endpoint, {
      method: "POST",
      body: q,
    });
    const response_json = await response.json();


    return response_json;
  }
</script>




<script>
  const btn = document.getElementById("btn-get-location");
  btn.onclick = attemptToFetchLocation;

  const x = document.getElementById("location");




  function attemptToFetchLocation(e) {

    //Define callback functions for handling the `getCurrentPosition()` method.
    const onLocationFetched = p => {
      x.textContent = `Latitude: ${p.coords.latitude} °, Longitude: ${p.coords.longitude}`;


      searchForNearbyShops(1000, p.coords.latitude, p.coords.longitude);
    };


    const onError = _ => {
      x.textContent = "An error occured while fetching your current location."
    };


    //Try to check if the browser supports the GeoLocation API.
    if (!navigator.geolocation) {
      x.textContent = "This browser doesn't support Geolocation.";
    }
    else {
      navigator.geolocation.getCurrentPosition(onLocationFetched, onError);
    }


    e.preventDefault();
  }




  async function searchForNearbyShops(r, lat, lon) {
    const overpass_endpoint = "https://overpass-api.de/api/interpreter";

    //Construct the query for OverPass API's GraphQL.
    const query = `[out:json];
(
  (node["shop"](around: ${r}, ${lat}, ${lon}););
  (node["building"="retail"](around: ${r}, ${lat}, ${lon}););
  (node["building"="supermarket"](around: ${r}, ${lat}, ${lon}););
  (node["building"="pharmacy"](around: ${r}, ${lat}, ${lon}););
);
out;`;


    //Send the HTTP Request and process the response.
    const response = await fetch(overpass_endpoint, {
      method: "POST",
      body: query,
    });
    const response_json = await response.json();


    console.log(response_json);
  }
</script>


<script>

  //Stores the HTML id of the element that is currently selected.
  let selected_shop_id = "";

  document.querySelector("#shopSearchDetectLocationButton").onclick = e => {

    //Defines the click handler for the Location Autodetection, it should auto
    //fill the Latitude and Longitude information.


    //Define callback functions for handling the `getCurrentPosition()` method.
    const onLocationFetched = p => {

      //Autofill the location data.
      document.querySelector("#shopSearchLatitude").value = p.coords.latitude;
      document.querySelector("#shopSearchLongitude").value = p.coords.longitude;
    };


    const onError = _ => {
      alert("An error occured while fetching your current location.");
    };


    //Try to check if the browser supports the GeoLocation API.
    if (!navigator.geolocation) {
      x.textContent = "This browser doesn't support Geolocation.";
    }
    else {
      navigator.geolocation.getCurrentPosition(onLocationFetched, onError);
    }

  };


  async function search()  {

    /** TODO : Optimize the shop searching process by caching the shop data on the server. And only
     * make a new request to the Overpass API if the search result doesn't contain shops inside the
     * cached shops. This allows us to have consistent data and solves the duplicate shops problem.
     *
     * So first, it searches the server for cached shop data. The server stores an internal representation
     * of all the areas previously queried to the OverPass API. Maybe query this data in grid chunks.
     * And then do the search radius of the cached data using a circle?

     * Then if the search radius of the cached data is outside of the available cached data, make a 
     * new request to OverPass API to obtain all the shops in that chunk. Then fill out the missing
     * street address on a per-request basis. This can also be optimized even further to only request
     * the information for shops that match the fuzzy-search.
     *
     * OpenCage GeoCoding API
     *
     * 2,500 requests/day
     * 1 request/sec
     */
    const result_box = document.querySelector("#searchResultBox");
    const search_box = document.querySelector("#shopSearchBox");
    const latitude_box = document.querySelector("#shopSearchLatitude");
    const longitude_box = document.querySelector("#shopSearchLongitude");
    const radius_box = document.querySelector("#shopSearchRadius");


    //Build the fuzzy-like search query.
    //const search_query = new RegExp(`^.*${search_box.value.trim().toLowerCase()}.*$`);
    const search_query = `${search_box.value.trim().toLowerCase()}`;


    //Build the query for the OverPass API
    const query = "[out:json];\n" + 
                  "(\n" +
                  `node["shop"="supermarket"](around: ${radius_box.value * 1000}, ${latitude_box.value}, ${longitude_box.value});\n` +
                  `node["shop"="convenience"](around: ${radius_box.value * 1000}, ${latitude_box.value}, ${longitude_box.value});\n` +
                  `node["shop"="variety_store"](around: ${radius_box.value * 1000}, ${latitude_box.value}, ${longitude_box.value});\n` +
                  `node["shop"="wholesale"](around: ${radius_box.value * 1000}, ${latitude_box.value}, ${longitude_box.value});\n` +
                  `node["shop"="department_store"](around: ${radius_box.value * 1000}, ${latitude_box.value}, ${longitude_box.value});\n` +
                  `node["shop"="general"](around: ${radius_box.value * 1000}, ${latitude_box.value}, ${longitude_box.value});\n` +
                  ");\n" +
                  "out;\n";


    //Query the OverPass QL API.
    const result = await OverPass_query(query);
    console.log(result);

    //Clear the previous results if any and hide the element
    //to optimize DOM updates.
    result_box.classList.add("visually-hidden");
    result_box.innerHTML = "";


    const result_length = result.elements.length;
    for (let i = 0; i < result_length; i++) {

      const shop = result.elements[i];

      const list_item_button = document.createElement("button");
      list_item_button.id = "shopSearchResult-" + (i + 1);
      list_item_button.classList.add("list-group-item", "list-group-item-action");
      list_item_button.innerHTML = result.elements[i].tags.name;
      list_item_button.innerHTML = `<strong class="shop-name">${shop.tags.name}</strong>` + 
                                   `<p class="shop-address">${shop.tags["addr:housenumber"]} ${shop.tags["addr:street"]}, ${shop.tags["addr:city"]}</p>` + 
                                   `<p class="shop-id visually-hidden">${shop.id}</p>` + 
                                   `<p class="shop-latitude visually-hidden">${shop.lat}</p>` + 
                                   `<p class="shop-longitude visually-hidden">${shop.lon}</p>` + 
                                   "";
      list_item_button.onclick = e => {

        //If there is a shop already selected, clear that selection before highlighting
        //the current one.
        if (selected_shop_id !== "") {
          document.querySelector("#" + selected_shop_id).classList.remove("active");
        }
        else {

          //This means that there wasn't a shop selected yet. So we should remove the disabled
          //attribute now.
          document.querySelector("#main-submit-button").disabled = false;
        }


        //Set the hidden input element values.
        const address = `${shop.tags["addr:housenumber"]} ${shop.tags["addr:street"]}, ${shop.tags["addr:city"]}` 
        document.querySelector("#shop-address-input").value = address;
        document.querySelector("#shop-id-input").value = shop.id;
        document.querySelector("#shop-name-input").value = shop.tags.name;
        document.querySelector("#shop-latitude-input").value = shop.lat;
        document.querySelector("#shop-longitude-input").value = shop.lon;


        //Highlight the current element and update the selected_shop_id variable.
        list_item_button.classList.add("active");
        selected_shop_id = list_item_button.id;
      };


      result_box.append(list_item_button);

    }


    result_box.classList.remove("visually-hidden");
  }
</script>
